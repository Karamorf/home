set t_Co=256

set directory=/tmp/curtis
set list
set listchars+=trail:.  "show trailing spaces
set listchars=tab:>-    "show tabs
"set mouse=a
set ruler                       "Always show current positions along the bottom
set hidden              "better buffer management


filetype plugin on
let g:BASH_AuthorName = 'Curtis MacDuff'
let g:BASH_Email = 'curtis.macduff@zonarsystems.net'
let g:BASH_Company = 'Zonar Systems'
set encoding=utf-8
"magic-indent the file / visual selection
map <silent> <F6> :call Indent() <CR>
vmap <F6> :call Indent()<CR>
function! Indent() range abort
   let savelnum = line(".")
   let lnum = a:firstline
   let lend = a:lastline
   if lnum == lend
       " No visual area choosen --> whole file
       " curpos to eof?
       let lnum = 1
       let lend = line("$")
       " Go to the begin of the file
       exec "1go"
   endif
   exec "normal " . lnum . "Gv" . lend . "G="
   exec "normal " . savelnum . "G"
endfunction

"And here are my text-formatting options:

"""""""""""

"Text Formatting
set autoindent          "Auto indenting
set cindent             "auto un-indent close bracket
set cinoptions=>4       "one tab only
set tabstop=4           "Tab width
set softtabstop=0       "Soft tabstop
set shiftwidth=4        "how much to shift text when formatting
set backspace=2         "backspace over every thing
set showmatch           "Blink to show the {} and () matche
set matchtime=2         "make it a quick blink though
set formatoptions=2l    "Do some neat comment stuff for u
syntax on               "Do Syntax hilighting
set nu                  "Show line number
set nohlsearch          "dont highlight search term
set incsearch           "try to auto complete search term

"make tabs and spaces display differently
"make a tab display as '>---'

"auto remove trailing white space
autocmd BufWritePre * :%s/\s\+$//e
"setting expandtab uses spaces instead of tab
set expandtab

"toggle paste
nmap <silent> <F3>  :set paste! <CR>
vmap <F3> :set paste! <CR>
imap <F3> :set paste! <CR>

"toggle line numbering
nmap <silent> <F4>  :set nu! <CR>
vmap <F4> :set nu! <CR>
imap <F4> :set nu! <CR>

" toggle NERD_tree (requires NERDTree.vim)
nmap <silent> <F5> :NERDTreeToggle <CR>
vmap <F5> :NERDTreeToggle <CR>
imap <F5> <Esc>:NERDTreeToggle <CR>a

"magic-indent the file / visual selection
map <silent> <F6> :call Indent() <CR>
vmap <F6> :call Indent()<CR>

"add exec perms and execute the file
nmap <F8> :!chmod +x %;./%<CR>

"check syntax for the current file
nmap <F11> :!bash -n %<CR>
nmap <F12> :!perl -wc %<CR>
"Execute the current buffer
nmap <silent> <C-x> :!./% <CR>

cmap W<CR> w<CR>
cmap W!<CR> w!<CR>
cmap Q<CR> q<CR>
cmap Q!<CR> q!<CR>
cmap Q1<CR> q!<CR>
cmap q1<CR> q!<CR>
cmap Wq<CR> wq<CR>
cmap WQ<CR> wq<CR>

colorscheme zenburn
cmap W<CR> w<CR>
cmap w!! %!sudo tee > /dev/null %

"Moving between splits by pressing Ctrl+hjkl (instead of Ctrl+W, hjkl)
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

au BufRead,BufNewFile *.js set ft=javascript syntax=jquery

set statusline=%F%m%r%h%w\ [FF=%{&ff}]\ [T=%Y]\ [A=\%03.3b]\ [H=\%02.2B]\ [POS=%04l,%04v][%p%%]\ [LEN=%L]

set autoread

" Use ,d (or ,dd or ,dj or 20,dd) to delete a line without adding it to the
" yanked stack (also, in visual mode)
nmap <silent> <leader>d "_d
vmap <silent> <leader>d "_d

if has("persistent_undo")
    set undodir=~/.vim/undodir
    set undofile
endif

function! SuperCleverTab()
   if strpart(getline('.'), 0, col('.') - 1) =~ '^\s*$'
       return "\<Tab>"
   else
       if &omnifunc != ''
           return "\<C-X>\<C-O>"
       elseif &dictionary != ''
           return "\<C-K>"
       else
           return "\<C-N>"
       endif
   endif
endfunction

inoremap <Tab> <C-R>=SuperCleverTab()<cr>

"xml formatter
function! DoPrettyXML()
  " save the filetype so we can restore it later
  let l:origft = &ft
  set ft=
  " delete the xml header if it exists. This will
  " permit us to surround the document with fake tag
  " without creating invalid xml.
  1s/<?xml .*?>//e
  " insert fake tags around the entire document.
  " This will permit us to pretty-format excerpts of
  " XML that may contain multiple top-level elements.
  0put ='<PrettyXML>'
  $put ='</PrettyXML>'
  silent %!xmllint --format -
  " xmllint will insert an <?xml?> header. it's easy enough to delete
  " if you don't want it.
  " delete the fake tag
  2d
  $d
  " restore the 'normal' indentation, which is one extra level
  " too deep due to the extra tags we wrapped around the document.
  silent %<
  " back to home
  1
  " restore the filetype
  exe "set ft=" . l:origft
endfunction
command! PrettyXML call DoPrettyXML()

"diff the buffer vs file (aka git rebase updated the file and curious to what changed)
function! s:DiffGit()
  let filetype=&ft
  diffthi
  vnew | exe "%!git diff " . expand("#:p:h") . "| patch -p 1 -Rs -o /dev/stdout"
  exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
  diffthi
endfunction
com! DiffGIT call s:DiffWithGITCheckedOut()


inoremap  <Up>     <NOP>
inoremap  <Down>   <NOP>
inoremap  <Left>   <NOP>
inoremap  <Right>  <NOP>
nnoremap   <Up>     <NOP>
nnoremap   <Down>   <NOP>
nnoremap   <Left>   <NOP>
nnoremap   <Right>  <NOP>

" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplcache.
let g:neocomplcache_enable_at_startup = 1
" Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" Use camel case completion.
let g:neocomplcache_enable_camel_case_completion = 1
" Use underbar completion.
let g:neocomplcache_enable_underbar_completion = 1
" Set minimum syntax keyword length.
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplcache_dictionary_filetype_lists = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
    \ }

" Define keyword.
if !exists('g:neocomplcache_keyword_patterns')
  let g:neocomplcache_keyword_patterns = {}
endif
let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
imap <C-k>     <Plug>(neocomplcache_snippets_expand)
smap <C-k>     <Plug>(neocomplcache_snippets_expand)
inoremap <expr><C-g>     neocomplcache#undo_completion()
inoremap <expr><C-l>     neocomplcache#complete_common_string()

" SuperTab like snippets behavior.
"imap <expr><TAB> neocomplcache#sources#snippets_complete#expandable() ? "\<Plug>(neocomplcache_snippets_expand)" : pumvisible() ? "\<C-n>" : "\<TAB>"

" Recommended key-mappings.
" <CR>: close popup and save indent.
"inoremap <expr><CR>  neocomplcache#smart_close_popup() . "\<CR>"
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()

" AutoComplPop like behavior.
"let g:neocomplcache_enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplcache_enable_auto_select = 1
"let g:neocomplcache_disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<TAB>"
"inoremap <expr><CR>  neocomplcache#smart_close_popup() . "\<CR>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplcache_omni_patterns')
  let g:neocomplcache_omni_patterns = {}
endif
let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'
"autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
let g:neocomplcache_omni_patterns.c = '\%(\.\|->\)\h\w*'
let g:neocomplcache_omni_patterns.cpp = '\h\w*\%(\.\|->\)\h\w*\|\h\w*::'

